import string


def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a


def mod_inverse(a, m):
    if gcd(a, m) != 1:
        return None
    u1, u2, u3 = 1, 0, a
    v1, v2, v3 = 0, 1, m

    while v3 != 0:
        q = u3 // v3
        v1, v2, v3, u1, u2, u3 = (
            u1 - q * v1,
            u2 - q * v2,
            u3 - q * v3,
            v1,
            v2,
            v3,
        )
    return u1 % m


def affine_encrypt(plain_text, a, b):
    cipher_text = ""
    for char in plain_text:
        if char.isalpha():
            if char.isupper():
                index = (a * (ord(char) - ord('A')) + b) % 26
                cipher_text += chr(index + ord('A'))
            else:
                index = (a * (ord(char) - ord('a')) + b) % 26
                cipher_text += chr(index + ord('a'))
        else:
            cipher_text += char
    return cipher_text


def affine_decrypt(cipher_text, a, b):
    decrypted_text = ""
    a_inverse = mod_inverse(a, 26)
    for char in cipher_text:
        if char.isalpha():
            if char.isupper():
                index = (a_inverse * (ord(char) - ord('A') - b)) % 26
                decrypted_text += chr(index + ord('A'))
            else:
                index = (a_inverse * (ord(char) - ord('a') - b)) % 26
                decrypted_text += chr(index + ord('a'))
        else:
            decrypted_text += char
    return decrypted_text


# Get user inputs
plaintext = input("Enter the plain text: ")
a = int(input("Enter the value of 'a' (should be relatively prime to 26): "))
b = int(input("Enter the value of 'b': "))

ciphertext = affine_encrypt(plaintext, a, b)
print("Ciphertext:", ciphertext)

decrypted_text = affine_decrypt(ciphertext, a, b)
print("Decrypted text:", decrypted_text)
